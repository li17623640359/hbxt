<?php
/**
 *
 * @Author: Lcs
 * @Date: 2018/6/2 15:47
 */

namespace app\shop\controller;

use app\shop\model\UserShopModel;
use app\user\model\UserModel;
use cmf\controller\UserBaseController;
use think\cache\driver\Memcached;
use think\Db;
use think\Validate;

class IndexController extends UserBaseController
{

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        if (cmf_is_mobile()){
//            echo "请在手机端访问本页面";
            $this->redirect(url('mshop/Login/login'));
        }
        $this->assign('user',session('user'));
    }

    /**
     *商户首页
     * @return mixed
     * @Author: Lcs
     * @Date: 2018/6/2 15:52
     */
    public function index()
    {
        $usershop=new UserShopModel();
        $res=$usershop->findOut(array('a.user_id'=>cmf_get_current_user_id()));
        $this->assign('res',$res);
        $province=Db::name('regions')->where(['parent_id'=>'00000000-0000-0000-0000-000000000000'])->select()->toArray();
        $city=Db::name('regions')->where(['parent_id'=>$res['province']])->select();
        $town=Db::name('regions')->where(['parent_id'=>$res['city']])->select();
        $this->assign('regions',$province);
        $this->assign('city',$city);
        $this->assign('town',$town);
        return $this->fetch();
    }

    /**
     *商户信息编辑提交
     * @return array
     * @Author: Lcs
     * @Date: 2018/6/5 19:26
     */
    public function indexPost(){
        $data=$this->request->param();
        $id=$data['id'];
        unset($data['id'],$data['file']);
        if (empty($data)) {
            return array('code' => 0, 'msg' => 'error');
        }
        $validate = new Validate([
            'shop_name|商铺名称' => 'require',
            'province|地址（省）' => 'require',
            'city|地址（市）' => 'require',
            'district|地址（区）' => 'require',
            'address|地址（详细地址）' => 'require'
        ]);
        if (!$validate->check($data)) {
            return array('code' => 0, 'msg' => $validate->getError());
        }
        $res = Db::name('user_shop')->where(array('id'=>$id))->update($data);
        if ($res) {
            return array('code' => 1, 'msg' => 'ok');
        } else {
            return array('code' => 0, 'msg' => 'error');
        }
    }

    /**
     *查询地址
     * @Author: Lcs
     * @Date: 2018/6/4 14:39
     */
    public function address()
    {
        $id = $this->request->param('id');
        $result = Db::name('regions')->where(array('parent_id' => $id))->select();
        echo json_encode($result);
    }

    /**
     *图片上传
     * @Author: Lcs
     * @Date: 2018/6/4 14:39
     */
    public function imgUpload()
    {
        $file = $this->request->file('file');
        $path = $this->request->param('path');
        if (empty($file)) {
            $this->error("服务器繁忙！", '', [
                'code' => 0,
                "msg" => '服务器繁忙！',
                "data" => "",
                "url" => ''
            ]);
        }
        $result = $file->validate([
            'ext' => 'jpg,jpeg,png,gif',
            'size' => 1024 * 1024 * 20
        ])->move(ROOT_PATH . DS . 'upload' . DS . $path . DS, $path.'_'.date('His') . str_pad(mt_rand(1, 99999), 5, '0', STR_PAD_LEFT));

        if ($result) {
            $img_save_name = str_replace('//', '/', str_replace('\\', '/', $result->getSaveName()));
            $img = $path . '/' . $img_save_name;
            $this->success("上传成功", '', [
                'code' => 1,
                "msg" => "上传成功",
                "data" => ['file' => $img],
                "url" => ''
            ]);
        } else {
            $this->error("上传失败！", '', [
                'code' => 0,
                "msg" => $file->getError(),
                "data" => "",
                "url" => ''
            ]);
        }
    }

    /**
     *更改密码
     * @Author: Lcs
     * @Date: 2018/6/7 12:00
     */
    public function updatePwd(){
        if ($this->request->isAjax()){
            $user=new UserModel();
            $log=$user->editPassword($this->request->param());
            switch ($log) {
                case 0:
                    return array('code'=>1,'msg'=>'ok',);
                    break;
                case 1:
                    return array('code'=>0,'msg'=>'两次密码输入不一致');
                    break;
                case 2:
                    return array('code'=>0,'msg'=>'旧密码错误');
                    break;
                default :
                    return array('code'=>0,'msg'=>'error');
            }
        }else{
            return $this->fetch();
        }
    }

    public function isPwd(){
        $pwd=$this->request->param('pwd');
//        cmf_compare_password
        $user=new UserModel();
        $res=$user->where(array('id'=>cmf_get_current_user_id(),'is_delete'=>1))->find();
        $pwder=cmf_compare_password($pwd,$res['user_pass']);
        if ($pwder){
            return array('code'=>1,'msg'=>'ok');
        }else{
            return array('code'=>0,'msg'=>'密码错误');
        }
    }
}